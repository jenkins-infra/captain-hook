/*
 Generated Code
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/jenkins-infra/captain-hook/pkg/api/captainhookio/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HookLister helps list Hooks.
// All objects returned here must be treated as read-only.
type HookLister interface {
	// List lists all Hooks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Hook, err error)
	// Hooks returns an object that can list and get Hooks.
	Hooks(namespace string) HookNamespaceLister
	HookListerExpansion
}

// hookLister implements the HookLister interface.
type hookLister struct {
	indexer cache.Indexer
}

// NewHookLister returns a new HookLister.
func NewHookLister(indexer cache.Indexer) HookLister {
	return &hookLister{indexer: indexer}
}

// List lists all Hooks in the indexer.
func (s *hookLister) List(selector labels.Selector) (ret []*v1alpha1.Hook, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Hook))
	})
	return ret, err
}

// Hooks returns an object that can list and get Hooks.
func (s *hookLister) Hooks(namespace string) HookNamespaceLister {
	return hookNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HookNamespaceLister helps list and get Hooks.
// All objects returned here must be treated as read-only.
type HookNamespaceLister interface {
	// List lists all Hooks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Hook, err error)
	// Get retrieves the Hook from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Hook, error)
	HookNamespaceListerExpansion
}

// hookNamespaceLister implements the HookNamespaceLister
// interface.
type hookNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Hooks in the indexer for a given namespace.
func (s hookNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Hook, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Hook))
	})
	return ret, err
}

// Get retrieves the Hook from the indexer for a given namespace and name.
func (s hookNamespaceLister) Get(name string) (*v1alpha1.Hook, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hook"), name)
	}
	return obj.(*v1alpha1.Hook), nil
}
